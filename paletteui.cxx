// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "paletteui.h"

Fl_Menu_Item PaletteUI::menu_Mode[] = {
 {"Normal", 0,  (Fl_Callback*)cb_ClutPrevDrawMode, (void*)(-1), 0, (uchar)FL_NORMAL_LABEL, 0, 11, 0},
 {"0:50%+50%", 0,  (Fl_Callback*)cb_ClutPrevDrawMode, (void*)(0), 0, (uchar)FL_NORMAL_LABEL, 0, 11, 0},
 {"1:100%+100%", 0,  (Fl_Callback*)cb_ClutPrevDrawMode, (void*)(1), 0, (uchar)FL_NORMAL_LABEL, 0, 11, 0},
 {"2:100%-100%", 0,  (Fl_Callback*)cb_ClutPrevDrawMode, (void*)(2), 0, (uchar)FL_NORMAL_LABEL, 0, 11, 0},
 {"3:100%+25%", 0,  (Fl_Callback*)cb_ClutPrevDrawMode, (void*)(3), 0, (uchar)FL_NORMAL_LABEL, 0, 11, 0},
 {"STP Mask", 0,  (Fl_Callback*)cb_ClutPrevDrawMode, (void*)(4), 0, (uchar)FL_NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* PaletteUI::drawmode[6];
PaletteUI::PaletteUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _PaletteUI();
}

PaletteUI::PaletteUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _PaletteUI();
}

PaletteUI::PaletteUI()
  : Fl_Double_Window(0, 0, 532, 400, "CLUT Editor") {
  clear_flag(16);
  _PaletteUI();
}

void PaletteUI::_PaletteUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fl_Group* o = new Fl_Group(5, 19, 260, 99, "Entry Color");
  o->box(FL_ENGRAVED_BOX);
  o->labelsize(12);
  o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  { redSlider = new Fl_Value_Slider(23, 26, 187, 19, "R");
    redSlider->type(5);
    redSlider->labelsize(12);
    redSlider->maximum(31);
    redSlider->step(1);
    redSlider->textsize(12);
    redSlider->callback((Fl_Callback*)cb_ClutSliderChange);
    redSlider->align(Fl_Align(FL_ALIGN_LEFT));
  } // Fl_Value_Slider* redSlider
  { greenSlider = new Fl_Value_Slider(23, 50, 187, 19, "G");
    greenSlider->type(5);
    greenSlider->labelsize(12);
    greenSlider->maximum(31);
    greenSlider->step(1);
    greenSlider->textsize(12);
    greenSlider->callback((Fl_Callback*)cb_ClutSliderChange);
    greenSlider->align(Fl_Align(FL_ALIGN_LEFT));
  } // Fl_Value_Slider* greenSlider
  { blueSlider = new Fl_Value_Slider(23, 74, 187, 19, "B");
    blueSlider->type(5);
    blueSlider->labelsize(12);
    blueSlider->maximum(31);
    blueSlider->step(1);
    blueSlider->textsize(12);
    blueSlider->callback((Fl_Callback*)cb_ClutSliderChange);
    blueSlider->align(Fl_Align(FL_ALIGN_LEFT));
  } // Fl_Value_Slider* blueSlider
  { stpToggle = new Fl_Check_Button(23, 98, 187, 15, "Semi-transparent");
    stpToggle->down_box(FL_DOWN_BOX);
    stpToggle->labelsize(12);
    stpToggle->callback((Fl_Callback*)cb_ClutStpToggle);
  } // Fl_Check_Button* stpToggle
  { colorBox = new Fl_Box(215, 26, 43, 43);
    colorBox->box(FL_THIN_UP_BOX);
    colorBox->color((Fl_Color)41);
  } // Fl_Box* colorBox
  o->end();
} // Fl_Group* o
{ palette = new Fl_ClutPalette(5, 135, 260, 260, "CLUT Entries");
  palette->box(FL_DOWN_BOX);
  palette->color(FL_BACKGROUND_COLOR);
  palette->selection_color(FL_BACKGROUND_COLOR);
  palette->labeltype(FL_NORMAL_LABEL);
  palette->labelfont(0);
  palette->labelsize(12);
  palette->labelcolor(FL_FOREGROUND_COLOR);
  palette->callback((Fl_Callback*)cb_PaletteClick);
  palette->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  palette->when(FL_WHEN_CHANGED);
  palette->end();
} // Fl_ClutPalette* palette
{ preview = new Fl_Scroll(270, 137, 256, 256, "Preview");
  preview->box(FL_FLAT_BOX);
  preview->color((Fl_Color)41);
  preview->labelsize(12);
  preview->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  preview->end();
} // Fl_Scroll* preview
{ Fl_Return_Button* o = new Fl_Return_Button(448, 19, 78, 20, "Ok");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_ClutOkay);
} // Fl_Return_Button* o
{ Fl_Button* o = new Fl_Button(448, 44, 78, 20, "Cancel");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_ClutCancel);
} // Fl_Button* o
{ Fl_Button* o = new Fl_Button(448, 69, 78, 20, "Revert");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_ClutRevert);
} // Fl_Button* o
{ clutIndex = new Fl_Spinner(270, 18, 75, 21, "CLUT Slot");
  clutIndex->labelsize(12);
  clutIndex->minimum(0);
  clutIndex->value(0);
  clutIndex->textsize(12);
  clutIndex->callback((Fl_Callback*)cb_ClutSlotValue);
  clutIndex->align(Fl_Align(FL_ALIGN_TOP_LEFT));
} // Fl_Spinner* clutIndex
{ Fl_Button* o = new Fl_Button(270, 44, 75, 20, "New Slot");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_ClutNewSlot);
} // Fl_Button* o
{ Fl_Button* o = new Fl_Button(270, 69, 75, 20, "Delete Slot");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_ClutDeleteSlot);
} // Fl_Button* o
{ zoomValue = new Fl_Spinner(500, 120, 26, 16, "Zoom");
  zoomValue->labelsize(10);
  zoomValue->maximum(8);
  zoomValue->textsize(10);
  zoomValue->callback((Fl_Callback*)cb_ClutZoom);
  zoomValue->when(FL_WHEN_CHANGED);
} // Fl_Spinner* zoomValue
{ Fl_Choice* o = new Fl_Choice(380, 120, 85, 16, "Mode");
  o->down_box(FL_BORDER_BOX);
  o->labelsize(11);
  o->textsize(11);
  drawmode[0] = &menu_Mode[0];
  drawmode[1] = &menu_Mode[1];
  drawmode[2] = &menu_Mode[2];
  drawmode[3] = &menu_Mode[3];
  drawmode[4] = &menu_Mode[4];
  drawmode[5] = &menu_Mode[5];
  o->menu(menu_Mode);
} // Fl_Choice* o
{ pickToggle = new Fl_Button(235, 120, 30, 16, "Pick");
  pickToggle->type(1);
  pickToggle->labelsize(11);
  pickToggle->callback((Fl_Callback*)cb_ClutPickMode);
} // Fl_Button* pickToggle
set_modal();
xclass("timid.palette");
end();
}
